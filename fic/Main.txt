public static void main(String[] args) throws JDOMException, IOException, ParseException
    {
    	/*Noeud n0 = new Noeud(0, 0, 0);
    	Noeud n1 = new Noeud(1, 1, 1);
    	Noeud n2 = new Noeud(2, 2, 2);
    	Noeud n3 = new Noeud(3, 3, 3);
    	Noeud n4 = new Noeud(4, 4, 4);
    	Noeud n5 = new Noeud(5, 5, 5);
    	
    	List<Noeud> ln = new ArrayList<Noeud>();
    	ln.add(n0);
    	ln.add(n1);
    	ln.add(n2);
    	ln.add(n3);
    	ln.add(n4);
    	ln.add(n5);
    	
    	Troncon t01 = new Troncon("rue du Caca", 15.0, 6.2);
    	t01.setSource(n0);
    	t01.setCible(n1);
    	Troncon t02 = new Troncon("rue du Tabac", 27.5, 15.0);
    	t02.setSource(n0);
    	t02.setCible(n2);
    	Troncon t12 = new Troncon("rue du Papa", 28.0, 7.1);
    	t12.setSource(n1);
    	t12.setCible(n2);
    	
    	n0.ajouterTronconSortant(t01);
    	n1.ajouterTronconEntrant(t01);
    	
    	n0.ajouterTronconSortant(t02);
    	n2.ajouterTronconEntrant(t02);
    	
    	n1.ajouterTronconSortant(t12);
    	n2.ajouterTronconEntrant(t12);*/
    	
    	ZoneGeographique z = new ZoneGeographique("fic\\plan10x10-test.xml");
    	Tournee t = new Tournee("fic\\livraison10x10-test.xml", z);
    	
    	Dijkstra dj = new Dijkstra(z, t);
    	
    	System.out.println("Sommet s_0 : " + dj.getVertexByNodeId(t.getEntrepot()));
    	
    	System.out.println("Nodes list :");
    	//System.out.println(zone.getNoeuds().toString());
    	System.out.println("Vertices list :");
    	System.out.println(dj.vertices);
    	 
    	for(Vertex v : dj.vertices) {
    		System.out.println(v + "adjacencies : ");
    		for(Edge e : v.adjacencies) {
    			System.out.println(e.toString());
    		}
    	}
    	
    	// Asking for the minimal path from vertex 0 to vertex 2 :
    	Vertex source = dj.getVertexByNodeId(t.getEntrepot());
    	Vertex target = dj.getVertexByNodeId(2);
    	
    	System.out.println("Computing paths form vertex " + source + " to all the vertices of the graph ...");
    	dj.computePaths(source);
    	System.out.println("Getting the best path to " + target + " ...");
    	List<Vertex> path = dj.getShortestPath(target);
    	if(path != null && path.size() != 1) {
    		System.out.println("=========================");
    		System.out.println("RESULT HAS BEEN FOUND !");
    		System.out.print("BEGINNING ");
    		for(Vertex v : path) {
    			System.out.print(" -> " + v);
    		}
    		System.out.println(" -> END");
    		System.out.println();
    		System.out.println("- - - - - - - - - - - -");
    		System.out.println("Distance of the minimal path : " + target.minDistance);
    		System.out.println("- - - - - - - - - - - -");
    		System.out.println("Total number of nodes in the zone : " + z.getNoeuds().size());
    		System.out.println("Total number of nodes in the graph : " + dj.vertices.size());
    		System.out.println("Number of visited nodes : " + (path.size()-1));
    		System.out.println("Unvisited node(s) of the graph for this path :");
    		
    		if(path.size()-1 == dj.vertices.size()) {
    			System.out.println("NONE");
    		} else {
    			for(Vertex v : dj.vertices) {
	    			if(!path.contains(v) && v != source)
	    				System.out.println(v.toString());
    			}
    		}
    		System.out.println("=========================");
    	} else {
    		System.out.println("Error : No path has been found from " + source + " to " + target + " : the two nodes may be not connected through the given graph.");
    	}
    	
    	int[][] costs = dj.getCost();
    	for(int i = 0; i < dj.getNbVertices(); i++) {
    		for(int j = 0; j < dj.getNbVertices(); j++) {
    			System.out.print("[" + costs[i][j] + "]");
    		}
    		System.out.println();
    	}
    	System.out.println("=========================");
	    /*for (int i = 0; i < dj.getNbVertices(); i++) {
	    	System.out.println("Successors of " + dj.vertices.get(i) +" :");
	    	int[] succ = dj.getSucc(i);
	    	for(int j = 0; j < succ.length; j++) {
	    		System.out.print("[" + dj.getVertexById(succ[j]) + "]");
	    	}
	    	System.out.println();
	    }*/
    	System.out.println("=========================");
    	System.out.println("Minimum cost in this graph : " + dj.getMinArcCost());
    	System.out.println("=========================");
    	System.out.println("Maximum cost in this graph : " + dj.getMaxArcCost());
    	System.out.println("=========================");
    	System.out.println("POSITIVE INFINTY : " + (int)Double.POSITIVE_INFINITY);
    	
    }