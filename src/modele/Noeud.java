/**
 * 
 */
package modele;

import java.util.ArrayList;
import java.util.List;

/**
 * Classe de Gestion des Noeuds
 * @author MohamedRiadh
 *
 */
public class Noeud {
	private int id;
	private int x;
	private int y;
<<<<<<< HEAD
	private List<Tron√ßon> tron√ßonsSortans = new ArrayList<Tron√ßon>();
	private List<Tron√ßon> tron√ßonsEntrants = new ArrayList<Tron√ßon>();
	private boolean visite=false;
=======
	private List<TronÁon> tronÁonsSortans = new ArrayList<TronÁon>();
	private List<TronÁon> tronÁonsEntrants = new ArrayList<TronÁon>();
<<<<<<< HEAD
	private boolean visite=false;
=======
>>>>>>> master
>>>>>>> William-TestAffichage
	
	/**
	 * Constructeur sans param√®tres de l'Objet Noeud
	 */
	public Noeud() {
	}
	
	/**
	 * Constructeur avec param√®tres de l'Objet Noeud
	 * @param unId l'ID du Noeud √† construire et ses coordonn√©es X et Y dans le plan
	 * @param unX l'absisse X du Noeud dans le plan
	 * @param unY l'oordonn√©e Y du Noeud dans le plan
	 */
	public Noeud(int unId, int unX, int unY) {
		id = unId;
		x = unX;
		y = unY;
	}
	
	/**
	 * Ajoute un objet tron√ßon √† la liste des tron√ßons sortants du Noeud 
	 * @param tron√ßon L'Objet Tron√ßon √† rajouter 
	 *
	 */
	public void ajouterTron√ßonSortant(Tron√ßon tron√ßon) {
		this.tron√ßonsSortans.add(tron√ßon);
	}
	
	/**
	 * Ajoute un objet tron√ßon √† la liste des tron√ßons entrants du Noeud
	 * @param tron√ßon L'Objet Tron√ßon √† rajouter
	 *
	 */
	public void ajouterTron√ßonEntrants(Tron√ßon tron√ßon) {
		this.tron√ßonsEntrants.add(tron√ßon);
	}
	
	/**
	 * Accesseur de l'Attribut tron√ßonsEntrants
	 * @return List<Tron√ßon> Liste des Objets Tron√ßons entrants de Noeud
	 *
	 */
	public List<Tron√ßon> getTron√ßonsEntrants() {
		return this.tron√ßonsEntrants;
	}
	
	/**
	 * Accesseur de l'Attribut tron√ßonsSortants
	 * @return List<Tron√ßon> Liste des Objets Tron√ßons sortants de Noeud
	 *
	 */
	public List<Tron√ßon> getTron√ßonsSortants() {
		return this.tron√ßonsSortans;
	}
	
	
	/**
	 * Accesseur de l'Attribut Id repr√©santant l'Identifiant du Noeud
	 * @return int la valeur de l'Attribut Id
	 *
	 */
	public int getId() {
		return id;
	}
	
	/**
	 * Accesseur de l'Attribut X repr√©santant l'absisse du Noeud dans le plan
	 * @return int la valeur de l'Attribut X
	 *
	 */
	public int getX() {
		return x;
	}
	
	/**
<<<<<<< HEAD
	 * Accesseur de l'Attribut Y repr√©santant l'ordonn√©e du Noeud dans le plan
=======
<<<<<<< HEAD
	 * Accesseur de l'Attribut Y reprÈsentant l'ordonnÈe du Noeud dans le plan
=======
	 * Accesseur de l'Attribut Y reprÈsantant l'ordonnÈe du Noeud dans le plan
>>>>>>> master
>>>>>>> William-TestAffichage
	 * @return int la valeur de l'Attribut Y
	 *
	 */
	public int getY() {
		return y;
<<<<<<< HEAD
	}
	
	public boolean getVisite(){
		return visite;
	}
	
	public void setVisite(boolean visite){
		this.visite=visite;
=======
>>>>>>> master
	}
	
	public boolean getVisite(){
		return visite;
	}
	
	public void setVisite(boolean visite){
		this.visite=visite;
	}
}
